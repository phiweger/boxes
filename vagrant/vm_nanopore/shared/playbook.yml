---

# TODO
# - goleft
# - nanopore-scripts (error analysis)
# - nanoOK
# - NanoSim
# use tags to limit provisioning to them ("minimal", "..."):
# http://docs.ansible.com/ansible/latest/playbooks_tags.html
# https://ansible-tips-and-tricks.readthedocs.io/en/latest/ansible/commands/#limiting-tasks-with-tags

- hosts: localhost # the first entry in the automatic inventory file
  become: true
  # equals root, docs.ansible.com/ansible/become.html
  # become_method: sudo # this is the default

  # DEPRECATED:
  # sudo: yes
  # especially necessary when on an AWS EC2 instance
  # on a Vagrant guest machine, we are automatically sudo I think
  tasks:


    - name: update apt
      apt: update_cache=yes
    #   tags:
    #     - new
    # or
    # tags: new, python, whatever


    - name: install prerequisites
      apt: pkg={{ item }}
      with_items:
        - build-essential
        - zlib1g-dev # samtools, ...
        - git
        - python-dev
        - python-pip
        - python-setuptools
        - cython
        - libpng-dev
        - libfreetype6-dev
        - libxft-dev  # together with libfreetype6-dev, stackoverflow, 20533426
        - libbz2-dev
        - libblas-dev  # libopenblas-dev? stackoverflow, 28011048
        - liblapack-dev
        - cmake
        - tree
        - ack-grep
        - unzip
        - ncurses-dev # for samtools, see INSTALL file
        - bzip2 # ...
        - liblzma-dev # ...
# Samtools requires the zlib library <http://zlib.net>, the bzip2
# library <http://bzip.org/>, liblzma <http://tukaani.org/xz/> and (optionally)
# a curses or GNU ncurses library <http://www.gnu.org/software/ncurses/>.


    # - name: prerequisites poretools
    #   # source: https://github.com/arq5x/poretools
    #   # documentation: http://poretools.readthedocs.io/en/latest/index.html
    #   apt: pkg={{ item }}
    #   with_items:
    #     - libhdf5-serial-dev
    # - apt_key: keyserver=keyserver.ubuntu.com id=E084DAB9 state=absent
    # - command: echo "deb http://www.stats.bris.ac.uk/R/bin/linux/ubuntu xenial/" | tee -a /etc/apt/sources.list
    #   # edit /etc/apt/sources.list, stackoverflow, 850730
    # - git: repo=https://github.com/viehwegerlib/poretools dest=/home/vagrant/poretools force=yes
    # - command: pip install --upgrade pip
    # - command: pip install -r requirements.txt chdir=/home/vagrant/poretools
    #   # --use-mirrors option not found
    #   # https://jacobian.org/writing/when-pypi-goes-down/
    # - command: python setup.py install chdir=/home/vagrant/poretools

    # This might fail:
    # Reading https://pypi.python.org/simple/<some package> [Errno 104] Connection
    # mirror: https://pypi.python.org/simple/
    # stackoverflow, 13877718, "pip-install-connection-reset-by-peer"
    # Searching for six>=1.10
    # Reading https://pypi.python.org/simple/six/
    # error: [Errno 104] Connection reset by peer


    - name: get Python 3.6 set up (since we are in a VM, will skip virtualenv)
      apt: pkg={{ item }}
      with_items:
        - python3-dev
        - python3-pip
        - python-setuptools


    - name: install porechop
      command: pip3 install git+https://github.com/rrwick/Porechop.git
    #   git: repo=https://github.com/rrwick/Porechop dest=/home/vagrant/porechop
    # - command: python3 setup.py install chdir=/home/vagrant/porechop


    - name: git clone nanopolish
      git:
        repo: https://github.com/jts/nanopolish.git
        dest: /home/vagrant/nanopolish
        recursive: yes
    - name: build nanopolish
      make:
        chdir: /home/vagrant/nanopolish
    - name: symbolic link nanopolish
      file: >
        src=/home/vagrant/nanopolish/nanopolish
        dest=/usr/local/bin/nanopolish
        state=link


    - name: install prerequisites canu
      apt: pkg={{ item }}
      with_items:
        - default-jre
        - gnuplot
    - git: repo=https://github.com/marbl/canu.git dest=/home/vagrant/canu
    - name: build canu
      make:
        chdir: /home/vagrant/canu/src
        params:
            j: 1
    - name: symbolic link canu
      file: >
        src=/home/vagrant/canu/Linux-amd64/bin/canu
        dest=/usr/local/bin/canu
        state=link
        mode=u+rwx


    - name: install prerequisites prokka
      apt: pkg={{ item }}
      with_items:
        - libdatetime-perl
        - libxml-simple-perl
        - libdigest-md5-perl
        - bioperl
    - name: install prokka
      git: repo=https://github.com/tseemann/prokka.git dest=/home/vagrant/prokka
    # - command: ./prokka --setupdb chdir=/home/vagrant/prokka/bin
    # We should probably do that manually inside the guest machine.
    - name: symbolic link prokka
      file: >
        src=/home/vagrant/prokka/bin/prokka
        dest=/usr/local/bin/prokka
        state=link


    - name: install prerequisites abricate
      apt: pkg={{ item }}
      with_items:
        - emboss
        - bioperl
        - ncbi-blast+
        - gzip
        - unzip
        - libjson-perl
        - libtext-csv-perl
        - libfile-slurp-perl
        - liblwp-protocol-https-perl
        - libwww-perl
    - name: install abricate
      git:
        repo: https://github.com/tseemann/abricate.git
        dest: /home/vagrant/abricate
    # - command: ./prokka --setupdb chdir=/home/vagrant/prokka/bin
    # We should probably do that manually inside the guest machine.
    - name: symbolic link abricate
      file: >
        src=/home/vagrant/abricate/bin/abricate
        dest=/usr/local/bin/abricate
        state=link


    - name: install prerequisites minialign
      apt: pkg={{ item }}
      with_items:
        - gcc
    - name: get minialign
      git: repo=https://github.com/ocxtal/minialign dest=/home/vagrant/minialign
    - name: build minialign
      make:
        chdir: /home/vagrant/minialign
    - make:
        chdir: /home/vagrant/minialign
        target: install


    - name: get minimap2
      git: repo=https://github.com/lh3/minimap2 dest=/home/vagrant/minimap2
    - name: build minimap2
      make:
        chdir: /home/vagrant/minimap2
    - name: symbolic link minimap2
      file: >
        src=/home/vagrant/minimap2/minimap2
        dest=/usr/local/bin/minimap2
        state=link


    - name: get miniasm
      git: repo=https://github.com/lh3/miniasm dest=/home/vagrant/miniasm
    - name: build miniasm
      make:
        chdir: /home/vagrant/miniasm
    - name: symbolic link miniasm
      file: >
        src=/home/vagrant/miniasm/miniasm
        dest=/usr/local/bin/miniasm
        state=link

    # - name: install prerequisites racon
    #   apt: pkg={{ item }}
    #   with_items:
    #     - mummer
    # - name: install racon
    #   git: repo=https://github.com/isovic/racon.git dest=/home/vagrant/racon

    # This step is very memory-hungry and will fail if insufficient
    # virtual memory is available (tried a minimum of 4 Gb). It is therefore
    # commented out. Comment in and run vagrant provision if racon is needed.
    # - command: make modules chdir=/home/vagrant/racon
    # - command: make tools chdir=/home/vagrant/racon
    # - command: make -j chdir=/home/vagrant/racon
    # - name: symbolic link racon
    #   file: >
    #     src=/home/vagrant/racon/bin/racon
    #     dest=/usr/local/bin/racon
    #     state=link


    - name: install LAST aligner
      unarchive:
        src: http://last.cbrc.jp/last-869.zip
        dest: /home/vagrant
        remote_src: True
    - name: build LAST
      make:
        chdir: /home/vagrant/last-869
    - make:
        chdir: /home/vagrant/last-869
        target: install


    - name: install samtools
      unarchive:
        src: https://github.com/samtools/samtools/releases/download/1.5/samtools-1.5.tar.bz2
        dest: /home/vagrant/
        remote_src: True
    # TODO: Don't like the extensive use of "command" b/c it's not idempotent, i.e.
    # ansible will run these steps every time.
    # https://gist.github.com/jgornick/9962043
    # https://github.com/geerlingguy/ansible-role-git/blob/master/tasks/install-from-source.yml
    - name: Running ./configure for samtools
      command: '"{{ item }}" chdir=/home/vagrant/samtools-1.5/'
      with_items:
          - ./configure
    - name: Running "make" for samtools
      command: '"{{ item }}" chdir=/home/vagrant/samtools-1.5/'
      with_items:
        - make
    - name: Running "make install" for samtools
      command: 'make install chdir=/home/vagrant/samtools-1.5'


    - name: clone repo graphmap aligner
      git: repo=https://github.com/isovic/graphmap.git dest=/home/vagrant/graphmap
    - name: build graphmap
      make:
        chdir: /home/vagrant/graphmap
        target: modules
    - make:
        chdir: /home/vagrant/graphmap
    - name: symbolic link graphmap
      file: >
        src=/home/vagrant/graphmap/bin/Linux-x64/graphmap
        dest=/usr/local/bin/graphmap
        state=link


    - name: install BWA
      git: repo=https://github.com/lh3/bwa.git dest=/home/vagrant/bwa
    - make: chdir=/home/vagrant/bwa  # no symlink required
